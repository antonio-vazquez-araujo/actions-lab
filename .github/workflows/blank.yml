# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Sign
        run: |
          set -e
          if [[ -z "$GITHUB_WORKSPACE" ]]; then
            echo "Set the GITHUB_WORKSPACE env variable."
            exit 1
          fi

          echo "--> outputting cert and key to files"
          mkdir /certs
          # The quotations around the cert/key vars are very import to handle line breaks
          echo "${WINDOWS_CERT}" > /certs/bundle.crt
          echo "${WINDOWS_KEY}" > /certs/codesign.key

          echo "--> signing binary"
          /osslsigncode/osslsigncode-1.7.1/osslsigncode sign -certs /certs/bundle.crt -key /certs/codesign.key -h sha256 -n ${NAME} -i ${DOMAIN} -t "http://timestamp.verisign.com/scripts/timstamp.dll" -in ${BINARY} -out /signedbinary

          echo "--> overwriting existing binary with signed binary"
          cp /signedbinary ${BINARY}
